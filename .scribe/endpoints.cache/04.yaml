## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Users Management'
description: |-

  APIs for generating and managing users
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: 'Users Management'
      groupDescription: |-

        APIs for generating and managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Get all users'
      description: 'Get a list of all users'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/register
    metadata:
      groupName: 'Users Management'
      groupDescription: |-

        APIs for generating and managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new user'
      description: 'Create a new user'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'required The authorization token. Example: Bearer {token}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: true
        example: 'Maurice Kamugisha'
        type: string
        custom: []
      email:
        name: email
        description: 'The email of the user.'
        required: true
        example: mF5uT@example.com
        type: string
        custom: []
      phone_number:
        name: phone_number
        description: 'The phone number of the user.'
        required: true
        example: '256781456492'
        type: string
        custom: []
      role:
        name: role
        description: 'The role of the user.'
        required: true
        example: 'admin,user'
        type: string
        custom: []
    cleanBodyParameters:
      name: 'Maurice Kamugisha'
      email: mF5uT@example.com
      phone_number: '256781456492'
      role: 'admin,user'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success",
              "data": {
                  "id": 1,
                  "name": "Maurice Kamugisha",
                  "email": "mF5uT@example.com",
                  "phone_number": "256781456492",
                  "role": "admin",
                  "photo": "https://ui-avatars.com/api/?name=Maurice+Kamugisha&size=128",
                  "created_at": "2022-01-01T00:00:00.000000Z",
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": [
                  "The given data was invalid."
              ],
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "status": "error",
              "message": [
                  "Unauthenticated."
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/user/{id}'
    metadata:
      groupName: 'Users Management'
      groupDescription: |-

        APIs for generating and managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Get User by id'
      description: 'Fetch a user by id'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'required The authorization token. Example: Bearer {token}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: sit
        type: string
        custom: []
    cleanUrlParameters:
      id: sit
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success",
              "data": {
                  "id": 1,
                  "name": "Maurice Kamugisha",
                  "email": "mF5uT@example.com",
                  "phone_number": "256781456492",
                  "role": "admin",
                  "photo": "https://ui-avatars.com/api/?name=Maurice+Kamugisha&size=128",
                  "created_at": "2022-01-01T00:00:00.000000Z",
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "status": "error",
              "message": [
                  "Unauthenticated."
              ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
              "status": "error",
              "message": [
                  "User not found."
              ],
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/user/{id}/update'
    metadata:
      groupName: 'Users Management'
      groupDescription: |-

        APIs for generating and managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user'
      description: 'Update user details'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'required The authorization token. Example: Bearer {token}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: quasi
        type: string
        custom: []
    cleanUrlParameters:
      id: quasi
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user'
        required: true
        example: quia
        type: string
        custom: []
      email:
        name: email
        description: 'The email of the user'
        required: true
        example: bhickle@example.net
        type: string
        custom: []
      phone_number:
        name: phone_number
        description: 'The phone number of the user'
        required: true
        example: nemo
        type: string
        custom: []
      role:
        name: role
        description: 'The role of the user'
        required: true
        example: non
        type: string
        custom: []
    cleanBodyParameters:
      name: quia
      email: bhickle@example.net
      phone_number: nemo
      role: non
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success",
              "data": {
                  "id": 1,
                  "name": "Maurice Kamugisha",
                  "email": "mF5uT@example.com",
                  "phone_number": "256781456492",
                  "role": "admin",
                  "photo": "https://ui-avatars.com/api/?name=Maurice+Kamugisha&size=128",
                  "created_at": "2022-01-01T00:00:00.000000Z",
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "status": "error",
              "message": [
                  "Unauthenticated."
              ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
              "status": "error",
              "message": [
                  "User not found."
              ],
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/user/status/update
    metadata:
      groupName: 'Users Management'
      groupDescription: |-

        APIs for generating and managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user status'
      description: 'Update user status'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The id of the user'
        required: true
        example: accusantium
        type: string
        custom: []
      status:
        name: status
        description: 'The status of the user'
        required: true
        example: eum
        type: string
        custom: []
    cleanBodyParameters:
      id: accusantium
      status: eum
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success",
              "data": {
                  "id": 1,
                  "name": "Maurice Kamugisha",
                  "email": "mF5uT@example.com",
                  "phone_number": "256781456492",
                  "role": "admin",
                  "photo": "https://ui-avatars.com/api/?name=Maurice+Kamugisha&size=128",
                  "created_at": "2022-01-01T00:00:00.000000Z",
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": [
                  "The given data was invalid."
              ],
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "status": "error",
              "message": [
                  "Unauthenticated."
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/user/{id}/password/reset'
    metadata:
      groupName: 'Users Management'
      groupDescription: |-

        APIs for generating and managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Reset user password'
      description: 'Reset user password'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: est
        type: string
        custom: []
    cleanUrlParameters:
      id: est
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The id of the user'
        required: true
        example: dolores
        type: string
        custom: []
    cleanBodyParameters:
      id: dolores
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success",
              "data": {
                  "id": 1,
                  "name": "Maurice Kamugisha",
                  "email": "mF5uT@example.com",
                  "phone_number": "256781456492",
                  "role": "admin",
                  "photo": "https://ui-avatars.com/api/?name=Maurice+Kamugisha&size=128",
                  "created_at": "2022-01-01T00:00:00.000000Z",
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": [
                  "The given data was invalid."
              ],
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "status": "error",
              "message": [
                  "Unauthenticated."
              ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
              "status": "error",
              "message": [
                  "User not found."
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/user/password/update
    metadata:
      groupName: 'Users Management'
      groupDescription: |-

        APIs for generating and managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user password'
      description: 'Update user password'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'required The authorization token. Example: Bearer {token}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The id of the user'
        required: true
        example: quae
        type: string
        custom: []
      password:
        name: password
        description: 'The password of the user'
        required: true
        example: 'zo?[rD_<hK6'
        type: string
        custom: []
    cleanBodyParameters:
      id: quae
      password: 'zo?[rD_<hK6'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success",
              "data": {
                  "id": 1,
                  "name": "Maurice Kamugisha",
                  "email": "mF5uT@example.com",
                  "phone_number": "256781456492",
                  "role": "admin",
                  "photo": "https://ui-avatars.com/api/?name=Maurice+Kamugisha&size=128",
                  "created_at": "2022-01-01T00:00:00.000000Z",
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": [
                  "The given data was invalid."
              ],
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
              "status": "error",
              "message": [
                  "Unauthenticated."
              ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
              "status": "error",
              "message": [
                  "User not found."
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
